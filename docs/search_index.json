[["index.html", "Perdiz arrow points from Caddo mortuary contexts in the American Southeast: Linear and landmark geometric morphometrics Preface 0.1 Basis of inquiry 0.2 Primary findings 0.3 Acknowledgments 0.4 Funding 0.5 Data management 0.6 Colophon", " Perdiz arrow points from Caddo mortuary contexts in the American Southeast: Linear and landmark geometric morphometrics Robert Z. Selden, Jr. 2021-04-06 Preface Reproducibilitythe ability to recompute resultsand replicabilitythe chances other experimenters will achieve a consistent resultare two foundational characteristics of successful scientific research (Leek and Peng 2015). This volume is written using Markdown, and includes all analysis code employed in the study, providing a means for others to reproduce (exactly) those results discussed and expounded upon in the following chapters. The replicable nature of this undertaking provides a means for others to critically assess and evaluate the various analytical components of this study (Gray and Marwick 2019; Peng 2011; Gandrud 2014), which is a necessary requirement for the production of reliable knowledge. 0.1 Basis of inquiry 0.2 Primary findings 0.2.1 Linear morphometrics Maximum thickness differs significantly by raw material Maximum stem width differs significantly by raw material 0.2.2 Geometric morphometrics There is significant allometry in the sample Common allometry is expressed among the Perdiz arrow points by raw material Perdiz arrow point shape does differ significantly by raw material Perdiz arrow point size does not differ significantly by raw material Morphological integration is significant for Perdiz arrow points Morphological disparity is not significant for raw materials Shape and linear data are significantly correlated 0.2.3 Symmetry and asymmetry There is significant asymmetry in the sample The symmetric shape of Perdiz arrow points differs significantly by raw material 0.3 Acknowledgments I express my gratitude to the Caddo Nation of Oklahoma and the Anthropology and Archaeology Laboratory at Stephen F. Austin State University for the requisite permissions and access to the NAGPRA items from the Washington Square Mound site and Turner collection. Thanks to  , as well as the editors and reviewers for their comments and constructive criticisms, which further improved the analysis and manuscript. 0.4 Funding Components of the analytical workflow were developed and funded by a Preservation Technology and Training grant (P14AP00138) to RZS from the National Center for Preservation Technology and Training, as well as grants to RZS from the Caddo Nation of Oklahoma, National Forests and Grasslands in Texas (15-PA-11081300-033) and the United States Forest Service (20-PA-11081300-074). 0.5 Data management The data and analysis code associated with this project can be accessed through this document or the GitHub repository. 0.6 Colophon This version of the analysis was generated on 2021-04-06 17:22:03 using the following computational environment and dependencies: # what R packages and versions were used? if (&quot;devtools&quot; %in% installed.packages()) devtools::session_info() ## - Session info --------------------------------------------------------------------------------- ## setting value ## version R version 4.0.4 (2021-02-15) ## os Windows 10 x64 ## system x86_64, mingw32 ## ui RStudio ## language (EN) ## collate English_United States.1252 ## ctype English_United States.1252 ## tz America/Chicago ## date 2021-04-06 ## ## - Packages ------------------------------------------------------------------------------------- ## package * version date lib source ## abind 1.4-5 2016-07-21 [1] CRAN (R 4.0.0) ## ape 5.4-1 2020-08-13 [1] CRAN (R 4.0.2) ## assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.2) ## backports 1.2.1 2020-12-09 [1] CRAN (R 4.0.3) ## bezier 1.1.2 2018-12-14 [1] CRAN (R 4.0.3) ## bookdown 0.21 2020-10-13 [1] CRAN (R 4.0.3) ## brew 1.0-6 2011-04-13 [1] CRAN (R 4.0.0) ## broom 0.7.5 2021-02-19 [1] CRAN (R 4.0.4) ## bslib 0.2.4 2021-01-25 [1] CRAN (R 4.0.3) ## cachem 1.0.4 2021-02-13 [1] CRAN (R 4.0.4) ## callr 3.6.0 2021-03-28 [1] CRAN (R 4.0.4) ## car 3.0-10 2020-09-29 [1] CRAN (R 4.0.3) ## carData 3.0-4 2020-05-22 [1] CRAN (R 4.0.0) ## cellranger 1.1.0 2016-07-27 [1] CRAN (R 4.0.2) ## cli 2.4.0 2021-04-05 [1] CRAN (R 4.0.4) ## cluster * 2.1.0 2019-06-19 [2] CRAN (R 4.0.4) ## colorspace 2.0-0 2020-11-11 [1] CRAN (R 4.0.3) ## cowplot 1.1.1 2020-12-30 [1] CRAN (R 4.0.3) ## crayon 1.4.1 2021-02-08 [1] CRAN (R 4.0.3) ## crosstalk 1.1.1 2021-01-12 [1] CRAN (R 4.0.3) ## curl 4.3 2019-12-02 [1] CRAN (R 4.0.2) ## data.table 1.14.0 2021-02-21 [1] CRAN (R 4.0.4) ## DBI 1.1.1 2021-01-15 [1] CRAN (R 4.0.3) ## dbplyr 2.1.0 2021-02-03 [1] CRAN (R 4.0.3) ## desc 1.3.0 2021-03-05 [1] CRAN (R 4.0.4) ## devtools 2.3.2 2020-09-18 [1] CRAN (R 4.0.2) ## digest 0.6.27 2020-10-24 [1] CRAN (R 4.0.3) ## dplyr * 1.0.5 2021-03-05 [1] CRAN (R 4.0.4) ## ellipsis 0.3.1 2020-05-15 [1] CRAN (R 4.0.2) ## evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.2) ## fansi 0.4.2 2021-01-15 [1] CRAN (R 4.0.3) ## farver 2.1.0 2021-02-28 [1] CRAN (R 4.0.4) ## fastmap 1.1.0 2021-01-25 [1] CRAN (R 4.0.3) ## forcats * 0.5.1 2021-01-27 [1] CRAN (R 4.0.3) ## foreign 0.8-81 2020-12-22 [2] CRAN (R 4.0.4) ## fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2) ## generics 0.1.0 2020-10-31 [1] CRAN (R 4.0.3) ## geomorph * 4.0.0 2021-04-05 [1] Github (geomorphR/geomorph@946ee06) ## ggExtra * 0.9 2019-08-27 [1] CRAN (R 4.0.2) ## ggfortify * 0.4.11 2020-10-02 [1] CRAN (R 4.0.3) ## ggplot2 * 3.3.3 2020-12-30 [1] CRAN (R 4.0.3) ## ggpubr * 0.4.0 2020-06-27 [1] CRAN (R 4.0.2) ## ggsignif 0.6.1 2021-02-23 [1] CRAN (R 4.0.4) ## git2r 0.28.0 2021-01-10 [1] CRAN (R 4.0.3) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2) ## gridExtra 2.3 2017-09-09 [1] CRAN (R 4.0.2) ## gtable 0.3.0 2019-03-25 [1] CRAN (R 4.0.2) ## haven 2.3.1 2020-06-01 [1] CRAN (R 4.0.2) ## here * 1.0.1 2020-12-13 [1] CRAN (R 4.0.3) ## highr 0.8 2019-03-20 [1] CRAN (R 4.0.2) ## hms 1.0.0 2021-01-13 [1] CRAN (R 4.0.3) ## htmltools 0.5.1.1 2021-01-22 [1] CRAN (R 4.0.3) ## htmlwidgets 1.5.3 2020-12-10 [1] CRAN (R 4.0.3) ## httpuv 1.5.5 2021-01-13 [1] CRAN (R 4.0.3) ## httr 1.4.2 2020-07-20 [1] CRAN (R 4.0.2) ## jpeg 0.1-8.1 2019-10-24 [1] CRAN (R 4.0.0) ## jquerylib 0.1.3 2020-12-17 [1] CRAN (R 4.0.3) ## jsonlite 1.7.2 2020-12-09 [1] CRAN (R 4.0.3) ## knitr 1.31 2021-01-27 [1] CRAN (R 4.0.3) ## labeling 0.4.2 2020-10-20 [1] CRAN (R 4.0.3) ## later 1.1.0.1 2020-06-05 [1] CRAN (R 4.0.2) ## lattice 0.20-41 2020-04-02 [2] CRAN (R 4.0.4) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.4) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 4.0.4) ## magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.0.3) ## manipulateWidget 0.10.1 2020-02-24 [1] CRAN (R 4.0.2) ## MASS 7.3-53.1 2021-02-12 [1] CRAN (R 4.0.4) ## Matrix * 1.3-2 2021-01-06 [1] CRAN (R 4.0.3) ## memoise 2.0.0 2021-01-26 [1] CRAN (R 4.0.3) ## mime 0.10 2021-02-13 [1] CRAN (R 4.0.4) ## miniUI 0.1.1.1 2018-05-18 [1] CRAN (R 4.0.2) ## modelr 0.1.8 2020-05-19 [1] CRAN (R 4.0.2) ## munsell 0.5.0 2018-06-12 [1] CRAN (R 4.0.2) ## nlme 3.1-152 2021-02-04 [2] CRAN (R 4.0.4) ## openxlsx 4.2.3 2020-10-27 [1] CRAN (R 4.0.3) ## pillar 1.5.1 2021-03-05 [1] CRAN (R 4.0.4) ## pkgbuild 1.2.0 2020-12-15 [1] CRAN (R 4.0.3) ## pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.2) ## pkgload 1.2.0 2021-02-23 [1] CRAN (R 4.0.4) ## png 0.1-7 2013-12-03 [1] CRAN (R 4.0.0) ## prettyunits 1.1.1 2020-01-24 [1] CRAN (R 4.0.2) ## processx 3.5.1 2021-04-04 [1] CRAN (R 4.0.5) ## promises 1.2.0.1 2021-02-11 [1] CRAN (R 4.0.3) ## ps 1.6.0 2021-02-28 [1] CRAN (R 4.0.4) ## purrr * 0.3.4 2020-04-17 [1] CRAN (R 4.0.2) ## R6 2.5.0 2020-10-28 [1] CRAN (R 4.0.3) ## Rcpp 1.0.6 2021-01-15 [1] CRAN (R 4.0.3) ## readr * 1.4.0 2020-10-05 [1] CRAN (R 4.0.3) ## readxl 1.3.1 2019-03-13 [1] CRAN (R 4.0.2) ## remotes 2.3.0 2021-04-01 [1] CRAN (R 4.0.5) ## reprex 2.0.0 2021-04-02 [1] CRAN (R 4.0.5) ## rgl * 0.105.22 2021-03-04 [1] CRAN (R 4.0.4) ## rio 0.5.26 2021-03-01 [1] CRAN (R 4.0.4) ## rjson 0.2.20 2018-06-08 [1] CRAN (R 4.0.0) ## rlang 0.4.10 2020-12-30 [1] CRAN (R 4.0.3) ## rmarkdown 2.7 2021-02-19 [1] CRAN (R 4.0.4) ## Rook 1.1-1 2014-10-20 [1] CRAN (R 4.0.3) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.3) ## RRPP * 1.0.0 2021-03-30 [1] CRAN (R 4.0.4) ## rstatix 0.7.0 2021-02-13 [1] CRAN (R 4.0.4) ## rstudioapi 0.13 2020-11-12 [1] CRAN (R 4.0.3) ## rvest 1.0.0 2021-03-09 [1] CRAN (R 4.0.4) ## sass 0.3.1 2021-01-24 [1] CRAN (R 4.0.3) ## scales 1.1.1 2020-05-11 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 4.0.2) ## shiny 1.6.0 2021-01-25 [1] CRAN (R 4.0.3) ## StereoMorph * 1.6.3 2019-11-30 [1] CRAN (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2) ## stringr * 1.4.0 2019-02-10 [1] CRAN (R 4.0.2) ## svgViewR 1.4.1 2020-10-03 [1] CRAN (R 4.0.3) ## testthat 3.0.2 2021-02-14 [1] CRAN (R 4.0.4) ## tibble * 3.1.0 2021-02-25 [1] CRAN (R 4.0.4) ## tidyr * 1.1.3 2021-03-03 [1] CRAN (R 4.0.4) ## tidyselect 1.1.0 2020-05-11 [1] CRAN (R 4.0.2) ## tidyverse * 1.3.0 2019-11-21 [1] CRAN (R 4.0.2) ## tiff 0.1-8 2021-03-31 [1] CRAN (R 4.0.4) ## tinytex 0.31 2021-03-30 [1] CRAN (R 4.0.4) ## usethis 2.0.1 2021-02-10 [1] CRAN (R 4.0.3) ## utf8 1.2.1 2021-03-12 [1] CRAN (R 4.0.4) ## vctrs 0.3.7 2021-03-29 [1] CRAN (R 4.0.4) ## webshot 0.5.2 2019-11-22 [1] CRAN (R 4.0.2) ## wesanderson * 0.3.6 2018-04-20 [1] CRAN (R 4.0.2) ## withr 2.4.1 2021-01-26 [1] CRAN (R 4.0.3) ## xfun 0.22 2021-03-11 [1] CRAN (R 4.0.4) ## xml2 1.3.2 2020-04-23 [1] CRAN (R 4.0.2) ## xtable 1.8-4 2019-04-21 [1] CRAN (R 4.0.2) ## yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0) ## zip 2.1.1 2020-08-27 [1] CRAN (R 4.0.2) ## ## [1] C:/Users/seldenjrz/Documents/R/win-library/4.0 ## [2] C:/Program Files/R/R-4.0.4/library Current Git commit details are: # where can I find this commit? if (&quot;git2r&quot; %in% installed.packages() &amp; git2r::in_repository(path = &quot;.&quot;)) git2r::repository(here::here()) ## Local: main D:/github/perdiz.3 ## Remote: main @ origin (https://github.com/aksel-blaise/perdiz.3) ## Head: [81ad673] 2021-04-06: &lt;init supp&gt; "],["linear-morphometrics-1.html", "Chapter 1 Linear morphometrics 1.1 Read data and define variables 1.2 Boxplots for variable by raw material 1.3 Principal Components Analysis 1.4 Analyses of Variance (ANOVA) for variable ~ raw.mat", " Chapter 1 Linear morphometrics # install required analysis packages #devtools::install_github(&quot;tidyverse/tidyverse&quot;) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) #devtools::install_github(&quot;kassambara/ggpubr&quot;) #devtools::install_github(&quot;sinhrks/ggfortify&quot;) #devtools::install_github(&quot;daattali/ggExtra&quot;) # load libraries library(here) library(tidyverse) library(RRPP) library(ggpubr) library(ggfortify) library(cluster) library(wesanderson) library(ggExtra) 1.1 Read data and define variables # read data data &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, as.is=TRUE) # define variables maxl &lt;- data$maxl # maximum length maxw &lt;- data$maxw # maximum width maxth &lt;- data$maxth # maximum thickness maxstl &lt;- data$maxstl # maximum stem length maxstw &lt;- data$maxstw # maximum stem width raw.mat &lt;- data$raw.mat # raw material 1.2 Boxplots for variable by raw material # boxplot of maximum length ~ raw.mat raw.matmaxl &lt;- ggplot(data, aes(x = raw.mat, y = maxl, color = raw.mat)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Raw Material&#39;, y = &#39;MaxL&#39;) # boxplot of maximum width ~ raw.mat raw.matmaxw &lt;- ggplot(data, aes(x = raw.mat, y = maxw, color = raw.mat)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Raw Material&#39;, y = &#39;MaxW&#39;) # boxplot of maximum thickness ~ raw.mat raw.matmaxth &lt;- ggplot(data, aes(x = raw.mat, y = maxth, color = raw.mat)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Raw Material&#39;, y = &#39;MaxTh&#39;) # boxplot of stem length ~ raw.mat raw.matmaxstl &lt;- ggplot(data, aes(x = raw.mat, y = maxstl, color = raw.mat)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;,stackdir = &#39;center&#39;,dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Raw Material&#39;, y = &#39;StemL&#39;) # boxplot of stem width ~ raw.mat raw.matmaxstw &lt;- ggplot(data, aes(x = raw.mat, y = maxstw, color = raw.mat)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) + theme(legend.position = &quot;none&quot;) + labs(x = &#39;Raw Material&#39;, y = &#39;StemW&#39;) # render figure raw.matfigure &lt;- ggarrange(raw.matmaxl, raw.matmaxw, raw.matmaxth, raw.matmaxstl, raw.matmaxstw, labels = c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;), ncol = 2, nrow = 3) ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. # plot figure raw.matfigure (#fig:boxraw.mat)Boxplots for maximum length, width, thickness, stem length, and stem width for Perdiz arrow points. 1.3 Principal Components Analysis #attributes for plot df&lt;-data[c(4:8)] pch.gps.gp &lt;- c(15,16)[as.factor(raw.mat)] col.gps.gp &lt;- wes_palette(&quot;Moonrise2&quot;)[as.factor(raw.mat)] #pca pca &lt;- autoplot(prcomp(df), data = data, asp = 1, shape = pch.gps.gp, colour = &quot;raw.mat&quot;, variance_percentage = TRUE, loadings = TRUE, loadings.colour = &#39;blue&#39;, loadings.label = TRUE, loadings.label.size = 3, frame = TRUE, frame.type = &#39;t&#39;) + scale_fill_manual(values = wes_palette(&quot;Moonrise2&quot;)) + scale_colour_manual(values = wes_palette(&quot;Moonrise2&quot;)) ggMarginal(pca, groupColour = TRUE) (#fig:pcaraw.mat)Principal components analysis by raw material. 1.4 Analyses of Variance (ANOVA) for variable ~ raw.mat 1.4.1 Maximum length of Perdiz arrow points # anova = maximum length ~ raw.mat raw.matml &lt;- lm.rrpp(maxl ~ raw.mat, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(raw.matml) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 91.04 45.522 0.10568 1.8316 0.95632 0.1738 ## Residuals 31 770.44 24.853 0.89432 ## Total 33 861.49 ## ## Call: lm.rrpp(f1 = maxl ~ raw.mat, iter = 9999, SS.type = &quot;I&quot;, data = data, ## print.progress = FALSE) 1.4.2 Maximum width of Perdiz arrow points # anova = maximum width ~ raw.mat raw.matmw &lt;- lm.rrpp(maxw ~ raw.mat, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(raw.matmw) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 1.081 0.5405 0.01047 0.164 -1.0747 0.854 ## Residuals 31 102.161 3.2955 0.98953 ## Total 33 103.242 ## ## Call: lm.rrpp(f1 = maxw ~ raw.mat, iter = 9999, SS.type = &quot;I&quot;, data = data, ## print.progress = FALSE) 1.4.3 Maximum thickness of Perdiz arrow points # anova = maximum thickness ~ raw.mat raw.matmth &lt;- lm.rrpp(maxth ~ raw.mat, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(raw.matmth) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 3.0761 1.53803 0.19767 3.8188 1.7917 0.0343 * ## Residuals 31 12.4852 0.40275 0.80233 ## Total 33 15.5613 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = maxth ~ raw.mat, iter = 9999, SS.type = &quot;I&quot;, data = data, ## print.progress = FALSE) 1.4.4 Maximum stem length of Perdiz arrow points # anova = maximum stem length ~ raw.mat raw.matmstl &lt;- lm.rrpp(maxstl ~ raw.mat, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(raw.matmstl) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 1.364 0.68189 0.03113 0.498 -0.27772 0.6149 ## Residuals 31 42.445 1.36919 0.96887 ## Total 33 43.809 ## ## Call: lm.rrpp(f1 = maxstl ~ raw.mat, iter = 9999, SS.type = &quot;I&quot;, data = data, ## print.progress = FALSE) 1.4.5 Maximum stem width of Perdiz arrow points # anova = maximum stem width ~ raw.mat raw.matmstw &lt;- lm.rrpp(maxstw ~ raw.mat, SS.type = &quot;I&quot;, data = data, iter = 9999, print.progress = FALSE) anova(raw.matmstw) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 7.9239 3.9620 0.35853 8.6632 2.94 6e-04 *** ## Residuals 31 14.1774 0.4573 0.64147 ## Total 33 22.1013 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: lm.rrpp(f1 = maxstw ~ raw.mat, iter = 9999, SS.type = &quot;I&quot;, data = data, ## print.progress = FALSE) "],["geometric-morphometrics-1.html", "Chapter 2 Geometric morphometrics 2.1 Load packages + data 2.2 Generalised Procrustes Analysis 2.3 Boxplot (centroid size) 2.4 Principal Components Analysis 2.5 Procrustes ANOVA: Shape and size 2.6 Allometry 2.7 Morphological integration 2.8 Morphological disparity 2.9 Shape vs linear data 2.10 Mean shapes", " Chapter 2 Geometric morphometrics 2.1 Load packages + data # download most recent software version #devtools::install_github(&quot;geomorphR/geomorph&quot;, ref = &quot;Stable&quot;, build_vignettes = TRUE) #devtools::install_github(&quot;mlcollyer/RRPP&quot;) # load analysis packages library(here) library(StereoMorph) library(geomorph) library(ggplot2) library(dplyr) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, row.names = 1) 2.2 Generalised Procrustes Analysis # gpa Y.gpa &lt;- gpagen(shapesGM, print.progress = FALSE) plot(Y.gpa) 2.3 Boxplot (centroid size) # dataframe gdf &lt;- geomorph.data.frame(shape = Y.gpa$coords, size = Y.gpa$Csize, raw.mat = qdata$raw.mat) # add centroid size to qdata qdata$csz &lt;- Y.gpa$Csize # attributes csz &lt;- qdata$csz raw.mat &lt;- qdata$raw.mat # palette pal = wes_palette(&quot;Moonrise2&quot;) # boxplot of Perdiz arrow points by raw.mat csz.temp &lt;- ggplot(qdata, aes(x = raw.mat, y = csz, color = raw.mat)) + geom_boxplot() + geom_dotplot(binaxis = &#39;y&#39;, stackdir = &#39;center&#39;, dotsize = 0.3) + scale_color_manual(values = pal) + theme(legend.position = &quot;none&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + labs(x = &#39;Raw Material&#39;, y = &#39;Centroid Size&#39;) # render plot csz.temp ## `stat_bindot()` using `bins = 30`. Pick better value with `binwidth`. 2.4 Principal Components Analysis # pca pca &lt;- gm.prcomp(Y.gpa$coords) summary(pca) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 34 ## Number of vectors 33 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 Comp5 ## Eigenvalues 0.005065696 0.003261422 0.0009175119 0.0004563108 0.0002856063 ## Proportion of Variance 0.478343244 0.307969382 0.0866387560 0.0430884910 0.0269692100 ## Cumulative Proportion 0.478343244 0.786312626 0.8729513818 0.9160398728 0.9430090827 ## Comp6 Comp7 Comp8 Comp9 Comp10 ## Eigenvalues 0.0001467771 0.0001283976 8.173805e-05 0.0000501841 0.0000484592 ## Proportion of Variance 0.0138598626 0.0121243210 7.718356e-03 0.0047387808 0.0045759023 ## Cumulative Proportion 0.9568689453 0.9689932663 9.767116e-01 0.9814504026 0.9860263048 ## Comp11 Comp12 Comp13 Comp14 Comp15 ## Eigenvalues 2.658862e-05 2.350167e-05 0.0000197514 0.000018490 1.144529e-05 ## Proportion of Variance 2.510709e-03 2.219214e-03 0.0018650840 0.001745972 1.080755e-03 ## Cumulative Proportion 9.885370e-01 9.907562e-01 0.9926213119 0.994367284 9.954480e-01 ## Comp16 Comp17 Comp18 Comp19 Comp20 ## Eigenvalues 9.606114e-06 8.480510e-06 7.058612e-06 4.834842e-06 4.166980e-06 ## Proportion of Variance 9.070855e-04 8.007971e-04 6.665301e-04 4.565442e-04 3.934793e-04 ## Cumulative Proportion 9.963551e-01 9.971559e-01 9.978225e-01 9.982790e-01 9.986725e-01 ## Comp21 Comp22 Comp23 Comp24 Comp25 ## Eigenvalues 3.351299e-06 2.531934e-06 2.310781e-06 1.679831e-06 1.298406e-06 ## Proportion of Variance 3.164562e-04 2.390853e-04 2.182023e-04 1.586230e-04 1.226058e-04 ## Cumulative Proportion 9.989889e-01 9.992280e-01 9.994462e-01 9.996048e-01 9.997274e-01 ## Comp26 Comp27 Comp28 Comp29 Comp30 ## Eigenvalues 7.965171e-07 6.926828e-07 4.310123e-07 3.255209e-07 2.444317e-07 ## Proportion of Variance 7.521347e-05 6.540861e-05 4.069960e-05 3.073826e-05 2.308118e-05 ## Cumulative Proportion 9.998027e-01 9.998681e-01 9.999088e-01 9.999395e-01 9.999626e-01 ## Comp31 Comp32 Comp33 ## Eigenvalues 2.197541e-07 1.319166e-07 4.451061e-08 ## Proportion of Variance 2.075093e-05 1.245661e-05 4.203045e-06 ## Cumulative Proportion 9.999833e-01 9.999958e-01 1.000000e+00 # set plot parameters pch.gps &lt;- c(15:17)[as.factor(raw.mat)] col.gps &lt;- pal[as.factor(raw.mat)] col.hull &lt;- c(&quot;#C27D38&quot;,&quot;#798E87&quot;,&quot;#CCC591&quot;) # pca plot pc.plot &lt;- plot(pca, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = raw.mat, group.cols = col.hull) 2.4.1 Minima/maxima of PC1/2 # plot x/y maxima/minima # x - minima mean.shape &lt;- mshape(Y.gpa$coords) plotRefToTarget(pca$shapes$shapes.comp1$min, mean.shape) # x - maxima plotRefToTarget(pca$shapes$shapes.comp1$max, mean.shape) # y - minima plotRefToTarget(pca$shapes$shapes.comp2$min, mean.shape) # y - maxima plotRefToTarget(pca$shapes$shapes.comp2$max, mean.shape) 2.5 Procrustes ANOVA: Shape and size # shape fit.sh.reg &lt;- procD.lm(shape ~ raw.mat, data = gdf, print.progress = FALSE, iter = 9999) # shape anova(fit.sh.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 0.06458 0.032292 0.1848 3.5138 2.6364 0.0026 ** ## Residuals 31 0.28489 0.009190 0.8152 ## Total 33 0.34947 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ raw.mat, iter = 9999, data = gdf, print.progress = FALSE) # size fit.sz.reg &lt;- procD.lm(size ~ raw.mat, data = gdf, print.progress = FALSE, iter = 9999) # size anova(fit.sz.reg) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 2.8526 1.42631 0.10832 1.8828 0.98761 0.1661 ## Residuals 31 23.4836 0.75754 0.89168 ## Total 33 26.3362 ## ## Call: procD.lm(f1 = size ~ raw.mat, iter = 9999, data = gdf, print.progress = FALSE) 2.6 Allometry # allometry fit.size &lt;- procD.lm(shape ~ size, data = gdf, print.progress = FALSE, iter = 9999) # allometry anova(fit.size) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## size 1 0.05094 0.050938 0.14576 5.4601 2.6749 0.0017 ** ## Residuals 32 0.29853 0.009329 0.85424 ## Total 33 0.34947 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ size, iter = 9999, data = gdf, print.progress = FALSE) ## PLS allom.PLS &lt;- two.b.pls(gdf$size, gdf$shape, print.progress = FALSE) allom.PLS ## ## Call: ## two.b.pls(A1 = gdf$size, A2 = gdf$shape, print.progress = FALSE) ## ## ## ## r-PLS: 0.597 ## ## Effect Size (Z): 2.9697 ## ## P-value: 0.002 ## ## Based on 1000 random permutations plot(allom.PLS) 2.6.1 Allometry models # allometry - unique allometries -&gt; raw.mat unique.allom &lt;- procD.lm(shape ~ size * raw.mat, data = gdf, print.progress = FALSE, iter = 9999) # common allometry, different means -&gt; raw.mat common.allom &lt;- procD.lm(shape ~ size + raw.mat, data = gdf, print.progress = FALSE, iter = 9999) # anova anova(unique.allom, common.allom, print.progress = FALSE) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Effect sizes (Z) based on F distributions ## ## ResDf Df RSS SS MS Rsq F Z P ## shape ~ size * raw.mat (Null) 28 1 0.23047 0.000000 ## shape ~ size + raw.mat 30 -2 0.24514 -0.014675 0.0073376 -0.041992 0.898 -1.5353 0.9377 ## Total 33 0.34947 ## Pr(&gt;F) ## shape ~ size * raw.mat (Null) ## shape ~ size + raw.mat ## Total # result not significant; common allometry most appropriate # predline plotAllometry(common.allom, size = gdf$size, logsz = TRUE, method = &quot;PredLine&quot;, col = col.gps, pch = pch.gps) # regscore plotAllometry(common.allom, size = gdf$size, logsz = TRUE, method = &quot;RegScore&quot;, col = col.gps, pch = pch.gps) 2.7 Morphological integration land.gps &lt;- c(&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;, &quot;A&quot;,&quot;A&quot;) it &lt;- integration.test(Y.gpa$coords, partition.gp = land.gps, iter = 9999, print.progress = FALSE) summary(it) ## ## Call: ## integration.test(A = Y.gpa$coords, partition.gp = land.gps, iter = 9999, ## print.progress = FALSE) ## ## ## ## r-PLS: 0.9522 ## ## Effect Size (Z): 4.97122 ## ## P-value: 1e-04 ## ## Based on 10000 random permutations plot(it) 2.8 Morphological disparity morphol.disparity(shape ~ raw.mat, groups = qdata$raw.mat, data = gdf, print.progress = FALSE, iter = 9999) ## ## Call: ## morphol.disparity(f1 = shape ~ raw.mat, groups = qdata$raw.mat, ## iter = 9999, data = gdf, print.progress = FALSE) ## ## ## ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Procrustes variances for defined groups ## chert quartzite s.wd ## 0.006624408 0.011126240 0.008969936 ## ## ## Pairwise absolute differences between variances ## chert quartzite s.wd ## chert 0.000000000 0.004501832 0.002345529 ## quartzite 0.004501832 0.000000000 0.002156304 ## s.wd 0.002345529 0.002156304 0.000000000 ## ## ## P-Values ## chert quartzite s.wd ## chert 1.0000 0.2464 0.4794 ## quartzite 0.2464 1.0000 0.6013 ## s.wd 0.4794 0.6013 1.0000 2.9 Shape vs linear data # are shape and linear data correlated? # subset linear data linear &lt;- qdata %&gt;% select(maxl, maxw, maxth, maxstl, maxstw) # 2B-PLS shape.meas.cor &lt;- two.b.pls(A1=Y.gpa$coords, A2=linear, print.progress = FALSE) summary(shape.meas.cor) ## ## Call: ## two.b.pls(A1 = Y.gpa$coords, A2 = linear, print.progress = FALSE) ## ## ## ## r-PLS: 0.667 ## ## Effect Size (Z): 3.2617 ## ## P-value: 0.001 ## ## Based on 1000 random permutations plot(shape.meas.cor) 2.10 Mean shapes # subset landmark coordinates to produce mean shapes new.coords &lt;- coords.subset(A = Y.gpa$coords, group = qdata$raw.mat) names(new.coords) ## [1] &quot;chert&quot; &quot;quartzite&quot; &quot;s.wd&quot; # group shape means mean &lt;- lapply(new.coords, mshape) # plot mean shapes plot(mean$chert) plot(mean$quartzite) plot(mean$s.wd) # comparison plots plotRefToTarget(mean$chert, mean$quartzite, method = &quot;points&quot;, mag = 1) plotRefToTarget(mean$chert, mean$s.wd, method = &quot;points&quot;, mag = 1) plotRefToTarget(mean$quartzite, mean$s.wd, method = &quot;points&quot;, mag = 1) "],["symmetry-and-asymmetry-1.html", "Chapter 3 Symmetry and asymmetry 3.1 Load packages + data 3.2 Generalized Procrustes Analysis 3.3 Principal Components Analysis (symmetric) 3.4 Principal Components Analysis (asymmetric) 3.5 Procrustes ANOVA", " Chapter 3 Symmetry and asymmetry In studies of projectile morphology, an analysis of bilateral/object symmetry may yield useful insights related to design intent, provided we assume that the goal of the knapper was to achieve a fully-symmetrical form. Within that framework, deviation from bilateral symmetry (fluctuating asymmetry) might serve as a useful measure of knapper skill and/or differential production. Both measures have utility in comparisons of contexts and sites, to include wide-ranging spatial and temporal applications. Initially developed for a symmetry analysis of Gahagan bifaces, the same approach can be employed for an analysis of asymmetry in Perdiz arrow points. 3.1 Load packages + data # load analysis packages library(here) library(geomorph) library(tidyverse) library(wesanderson) # read shape data and define number of sLMs shapes &lt;- readShapes(&quot;shapes&quot;) shapesGM &lt;- readland.shapes(shapes, nCurvePts = c(10,3,5,5,3,10)) # read qualitative data qdata &lt;- read.csv(&quot;qdata.csv&quot;, header = TRUE, row.names = 1) land.pairs &lt;- read.csv(&quot;asymmetry1.csv&quot;, header=TRUE) ind &lt;- qdata$spec.x 3.2 Generalized Procrustes Analysis # gpa for bilateral (object) asymmetry res.bilat &lt;- bilat.symmetry(shapesGM, ind = ind, object.sym = TRUE, land.pairs = land.pairs, RRPP = TRUE, iter = 9999, print.progress = FALSE) ## ## Performing GPA ## | | | 0% | |========= | 10% | |================== | 20% | |========================== | 30% | |=================================== | 40% | |============================================ | 50% | |===================================================== | 60% | |============================================================== | 70% | |====================================================================== | 80% | |=============================================================================== | 90% | |========================================================================================| 100% ## ## Making projections... Finished! summary(res.bilat) ## ## Call: ## bilat.symmetry(A = shapesGM, ind = ind, object.sym = TRUE, land.pairs = land.pairs, ## iter = 9999, RRPP = TRUE, print.progress = FALSE) ## ## ## Symmetry (data) type: Object ## ## Type I (Sequential) Sums of Squares and Cross-products ## Randomized Residual Permutation Procedure Used ## 10000 Permutations ## ## Shape ANOVA ## Df SS MS Rsq F Z Pr(&gt;F) ## ind 33 0.60500 0.0183334 0.89307 11.915 11.6372 1e-04 *** ## side 1 0.02167 0.0216658 0.03198 14.081 3.4472 1e-04 *** ## ind:side 33 0.05077 0.0015386 0.07495 ## Total 67 0.67744 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 3.2.1 Symmetric shape # symmetric shape symm.shape &lt;- res.bilat$symm.shape[,1:2,] # plot all specimens in 2D plotAllSpecimens(symm.shape) (#fig:symm.shape)Symmetric shape component plotted in 2D. 3.2.2 Asymmetric shape # asymmetric shape asymm.shape &lt;- res.bilat$FA.component[,1:2,] # plot all specimens in 2D plotAllSpecimens(asymm.shape) (#fig:asymm.shape)Asymmetric shape component plotted in 2D. 3.3 Principal Components Analysis (symmetric) # geomorph data frame gdf &lt;- geomorph.data.frame(shape = res.bilat$symm.shape, ashape = res.bilat$FA.component, raw.mat = qdata$raw.mat) # principal components analysis (symmetric) pca.symm &lt;- gm.prcomp(res.bilat$symm.shape) summary(pca.symm) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 34 ## Number of vectors 28 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 Comp5 ## Eigenvalues 0.004708168 0.003200768 0.0006599687 0.0002893971 0.0001294446 ## Proportion of Variance 0.513616720 0.349173565 0.0719963576 0.0315705001 0.0141211812 ## Cumulative Proportion 0.513616720 0.862790284 0.9347866418 0.9663571419 0.9804783230 ## Comp6 Comp7 Comp8 Comp9 Comp10 ## Eigenvalues 6.196014e-05 4.788305e-05 2.950307e-05 1.260255e-05 8.855230e-06 ## Proportion of Variance 6.759267e-03 5.223589e-03 3.218506e-03 1.374820e-03 9.660221e-04 ## Cumulative Proportion 9.872376e-01 9.924612e-01 9.956797e-01 9.970545e-01 9.980205e-01 ## Comp11 Comp12 Comp13 Comp14 Comp15 ## Eigenvalues 5.535405e-06 3.974561e-06 2.922251e-06 1.911615e-06 1.525591e-06 ## Proportion of Variance 6.038605e-04 4.335871e-04 3.187900e-04 2.085392e-04 1.664276e-04 ## Cumulative Proportion 9.986244e-01 9.990580e-01 9.993768e-01 9.995853e-01 9.997517e-01 ## Comp16 Comp17 Comp18 Comp19 Comp20 ## Eigenvalues 1.100165e-06 4.746452e-07 2.835774e-07 1.745748e-07 1.316851e-07 ## Proportion of Variance 1.200176e-04 5.177932e-05 3.093562e-05 1.904446e-05 1.436561e-05 ## Cumulative Proportion 9.998717e-01 9.999235e-01 9.999545e-01 9.999735e-01 9.999879e-01 ## Comp21 Comp22 Comp23 Comp24 Comp25 ## Eigenvalues 6.710856e-08 2.018132e-08 1.082899e-08 7.798029e-09 2.848839e-09 ## Proportion of Variance 7.320912e-06 2.201592e-06 1.181341e-06 8.506914e-07 3.107814e-07 ## Cumulative Proportion 9.999952e-01 9.999974e-01 9.999986e-01 9.999994e-01 9.999997e-01 ## Comp26 Comp27 Comp28 ## Eigenvalues 1.312820e-09 7.635056e-10 3.094759e-10 ## Proportion of Variance 1.432162e-07 8.329127e-08 3.376090e-08 ## Cumulative Proportion 9.999999e-01 1.000000e+00 1.000000e+00 # set plot parameters pch.gps &lt;- c(15:17)[as.factor(raw.mat)] col.gps &lt;- pal[as.factor(raw.mat)] col.hull &lt;- c(&quot;#C27D38&quot;,&quot;#798E87&quot;,&quot;#CCC591&quot;) # pca.symm plot pc.plot &lt;- plot(pca.symm, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = raw.mat, group.cols = col.hull) 3.4 Principal Components Analysis (asymmetric) # principal components analysis (asymmetric) pca.asymm &lt;- gm.prcomp(res.bilat$FA.component) summary(pca.asymm) ## ## Ordination type: Principal Component Analysis ## Centering by OLS mean ## Orthogonal projection of OLS residuals ## Number of observations: 34 ## Number of vectors 28 ## ## Importance of Components: ## Comp1 Comp2 Comp3 Comp4 Comp5 ## Eigenvalues 0.001585666 0.0006689228 0.0002773235 0.0001680756 0.0001091125 ## Proportion of Variance 0.515285490 0.2173763355 0.0901203694 0.0546186632 0.0354577244 ## Cumulative Proportion 0.515285490 0.7326618257 0.8227821951 0.8774008583 0.9128585827 ## Comp6 Comp7 Comp8 Comp9 Comp10 ## Eigenvalues 7.638053e-05 5.605321e-05 4.702709e-05 2.949436e-05 1.574975e-05 ## Proportion of Variance 2.482098e-02 1.821532e-02 1.528215e-02 9.584627e-03 5.118114e-03 ## Cumulative Proportion 9.376796e-01 9.558949e-01 9.711770e-01 9.807617e-01 9.858798e-01 ## Comp11 Comp12 Comp13 Comp14 Comp15 ## Eigenvalues 1.107599e-05 9.402103e-06 7.589014e-06 4.845575e-06 0.0000039822 ## Proportion of Variance 3.599305e-03 3.055352e-03 2.466162e-03 1.574641e-03 0.0012940748 ## Cumulative Proportion 9.894791e-01 9.925344e-01 9.950006e-01 9.965752e-01 0.9978693072 ## Comp16 Comp17 Comp18 Comp19 Comp20 ## Eigenvalues 2.466888e-06 1.364466e-06 9.763914e-07 5.990242e-07 5.399078e-07 ## Proportion of Variance 8.016518e-04 4.434033e-04 3.172928e-04 1.946618e-04 1.754510e-04 ## Cumulative Proportion 9.986710e-01 9.991144e-01 9.994317e-01 9.996263e-01 9.998018e-01 ## Comp21 Comp22 Comp23 Comp24 Comp25 ## Eigenvalues 2.992219e-07 1.619808e-07 9.915144e-08 2.609730e-08 1.272776e-08 ## Proportion of Variance 9.723657e-05 5.263805e-05 3.222073e-05 8.480702e-06 4.136075e-06 ## Cumulative Proportion 9.998990e-01 9.999516e-01 9.999839e-01 9.999923e-01 9.999965e-01 ## Comp26 Comp27 Comp28 ## Eigenvalues 7.308699e-09 2.585122e-09 9.379995e-10 ## Proportion of Variance 2.375070e-06 8.400735e-07 3.048168e-07 ## Cumulative Proportion 9.999989e-01 9.999997e-01 1.000000e+00 # pca.asymm plot pc.plot &lt;- plot(pca.asymm, asp = 1, pch = pch.gps, col = col.gps) shapeHulls(pc.plot, groups = raw.mat, group.cols = col.hull) 3.5 Procrustes ANOVA # symmetric shape as a function of raw material fit.shape.raw &lt;- procD.lm(shape ~ raw.mat, data = gdf, print.progress = FALSE, iter = 9999) # anova anova(fit.shape.raw) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 0.059084 0.0295418 0.19532 3.7622 2.6438 0.0027 ** ## Residuals 31 0.243417 0.0078522 0.80468 ## Total 33 0.302501 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Call: procD.lm(f1 = shape ~ raw.mat, iter = 9999, data = gdf, print.progress = FALSE) # asymmetric shape as a function of raw material fit.shape.raw.asymm &lt;- procD.lm(ashape ~ raw.mat, data = gdf, print.progress = FALSE, iter = 9999) # anova anova(fit.shape.raw.asymm) ## ## Analysis of Variance, using Residual Randomization ## Permutation procedure: Randomization of null model residuals ## Number of permutations: 10000 ## Estimation method: Ordinary Least Squares ## Sums of Squares and Cross-products: Type I ## Effect sizes (Z) based on F distributions ## ## Df SS MS Rsq F Z Pr(&gt;F) ## raw.mat 2 0.003524 0.0017619 0.0347 0.5572 -0.85146 0.7941 ## Residuals 31 0.098026 0.0031621 0.9653 ## Total 33 0.101549 ## ## Call: procD.lm(f1 = ashape ~ raw.mat, iter = 9999, data = gdf, print.progress = FALSE) # end of code "],["references.html", "References", " References Gandrud, Christopher. 2014. Reproducible Research with r and RStudio. Book. The r Series. London: CRC Press. Gray, Charles T., and Ben Marwick. 2019. Truth, Proof, and Reproducibility: Theres No Counter-Attack for the Codeless. Book Section. In Statistics and Data Science, 11129. Communications in Computer and Information Science. https://doi.org/10.1007/978-981-15-1960-4_8. Leek, Jeffrey T., and Roger D. Peng. 2015. Opinion: Reproducible Research Can Still Be Wrong: Adopting a Prevention Approach. Journal Article. Proc Natl Acad Sci U S A 112 (6): 164546. https://doi.org/10.1073/pnas.1421412111. Peng, Roger D. 2011. Reproducible Research in Computational Science. Journal Article. Science 334 (6060): 122627. https://doi.org/10.1126/science.1213847. "]]
